
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the authenticated user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read; 
      allow write: if request.auth != null && request.auth.uid == userId; 
      allow read, write: if isAdmin();
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read; 
      allow create, update, delete: if isAdmin();
    }

    // Documents collection
    match /documents/{documentId} {
      allow read; 
      allow create, update, delete: if isAdmin();
    }

    // Flights collection
    match /flights/{flightId} {
      allow read; 
      allow create, update, delete: if isAdmin();
    }
    
    // User Activities collection (replaces userFlightAssignments)
    match /userActivities/{activityId} {
      // User can create their own activities
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // User can read their own activities
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // User can update their own activities (e.g., comments, though less common)
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      // User can delete their own activities
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Admins can read all activities
      allow read: if isAdmin();
      // Admins can manage (update/delete) activities if necessary
      allow update, delete: if isAdmin();
    }

    // Requests collection (user-submitted requests)
    match /requests/{requestId} {
      // User can create their own requests
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // User can read their own requests
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Admins can read and update (e.g., status, adminResponse) any request
      allow read, update: if isAdmin();
      // Generally, users should not be able to delete requests. Admins could.
      allow delete: if isAdmin(); 
    }

    // Purser Reports collection
    match /purserReports/{reportId} {
        // Authenticated users can create their own reports
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read and manage all reports
        allow read, update, delete: if isAdmin();
        // Users can read their own submitted reports (if a page for this is added)
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Course-related collections
    match /courses/{courseId} {
      allow read; 
      allow create, update, delete: if isAdmin();
    }

    match /quizzes/{quizId} {
      allow read; 
      allow create, update, delete: if isAdmin();
    }

    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /userTrainingProgress/{progressId} {
      function isOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }
       function isCreatingOwner() {
        return request.auth != null && request.resource.data.userId == request.auth.uid;
      }

      allow read, write: if isOwner(); 
      allow create: if isCreatingOwner(); 
      allow read: if isAdmin();
    }
    
    // Deprecated: User Flight Assignments (replaced by userActivities)
    // match /userFlightAssignments/{assignmentId} {
    //   allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    //   allow read, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    //   allow read, write, delete: if isAdmin();
    // }


    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
