
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check for role in the user's document in Firestore.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAdmin();
    }
    
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /alertAcknowledgements/{ackId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }

    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /userTrainingProgress/{progressId} {
      allow read: if isOwner(resource.data.userId);
      allow create, update: if isOwner(request.resource.data.userId);
    }
    
    match /documents/{documentId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /userActivities/{activityId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
    }
    
    match /purserReports/{reportId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create, update: if isOwner(request.resource.data.userId);
      allow delete: if isAdmin() || isOwner(resource.data.userId);
    }
    
    match /requests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admins can update status/response.
    }
    
    match /suggestions/{suggestionId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.userId);
      // Admin can update anything. User can only update upvote-related fields.
      allow update: if isAdmin() || 
        (
          isOwner(resource.data.userId) &&
          request.resource.data.subject == resource.data.subject &&
          request.resource.data.details == resource.data.details &&
          request.resource.data.category == resource.data.category &&
          request.resource.data.isAnonymous == resource.data.isAnonymous &&
          request.resource.data.status == resource.data.status &&
          request.resource.data.adminNotes == resource.data.adminNotes
        );
    }

    match /systemConfiguration/{configId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if request.auth != null;
    }
    
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isOwner(resource.data.userId) || isAdmin();
        
        match /comments/{commentId} {
            allow read: if request.auth != null;
            allow create: if isOwner(request.resource.data.userId);
        }
    }
  }
}
