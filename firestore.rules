rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isRole('admin');
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own profile. Admins can read/write any profile.
    match /users/{userId} {
      allow read: if isSignedIn(); // Allow any signed-in user to read user profiles (for crew lists, etc.)
      allow update: if request.auth.uid == userId || isAdmin(); // User can update their own profile, or admin can
      allow create, delete: if isAdmin(); // Only admins can create/delete users directly
    }

    // Alerts are read-only for users, full access for admins.
    match /alerts/{alertId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Suggestions can be created and upvoted by any user. Full access for admins.
    match /suggestions/{suggestionId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        // Allow users to update only the upvote arrays
        allow update: if isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']));
        allow delete: if isAdmin();
    }
    
    // Community posts can be read by anyone signed in.
    // Users can create posts and update the likes on any post.
    match /communityPosts/{postId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        // Allow users to update only the 'likes' and 'likeCount' fields
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
        allow delete: if request.auth.uid == resource.data.authorId || isAdmin();
    }

    // Admins have full control. Users can only create their own requests and read them.
    match /requests/{requestId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    // Admins have full control. Pursers can create reports. Users can read their own reports.
    match /purserReports/{reportId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if isSignedIn() && (isRole('purser') || isRole('admin') || isRole('instructor'));
      allow update, delete: if isAdmin();
    }
    
    // Flight swaps can be created/read by any signed-in user.
    // Updates/deletes are more specific.
    match /flightSwaps/{swapId} {
        allow read, create: if isSignedIn();
        allow update: if isSignedIn(); // Logic is handled in backend service and rules can be complex. Allow update for auth user and secure via backend.
        allow delete: if isAdmin();
    }

    // Documents can be read by any signed-in user, but only managed by admins.
    match /documents/{documentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Users can create/update/delete their own documents. Admins have full access.
    match /userDocuments/{userDocId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if isSignedIn();
        allow update: if request.auth.uid == resource.data.userId || isAdmin();
        allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    // Admins have full control. Users cannot write, but can read courses.
    match /courses/{courseId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Admins have full control. Quizzes are read-only for users as part of courses.
    match /quizzes/{quizId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // Admins have full control. Questions are read-only for users.
    match /questions/{questionId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Admins have full control. Certificate rules are read-only for users.
    match /certificateRules/{ruleId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Users can create their own quiz attempts. Admins can read any attempt.
    match /userQuizAttempts/{attemptId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if isSignedIn();
        allow update, delete: if isAdmin();
    }
    
    // Trainings can be read by any user, managed only by admin.
    match /trainingSessions/{sessionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Flights can be read by any user, managed only by admin.
    match /flights/{flightId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // User activities are records of what a user is doing on a day.
    // They should be readable by the user themselves, or by an admin.
    // Writes are complex and handled by backend logic (e.g. adding flight), so we allow admin writes.
    match /userActivities/{activityId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow write: if isAdmin();
    }

    // System configuration is admin-only.
    match /systemConfiguration/{configId} {
        allow read, write: if isAdmin();
    }
    
    // Audit logs are admin-only.
    match /auditLogs/{logId} {
        allow read, write: if isAdmin();
    }
  }
}
