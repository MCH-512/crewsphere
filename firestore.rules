
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user has an 'admin' role.
    function isAdmin() {
      // Get the user's document from the 'users' collection using their UID.
      // request.auth.uid holds the UID of the authenticated user making the request.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default rule: Disallow all reads and writes unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // Admins can read/write any user document.
      // Authenticated users can read any user's profile (for display names, etc.).
      // Users can only write to their own document.
      allow read: if isAdmin() || request.auth != null;
      allow write: if isAdmin() || request.auth.uid == userId;
    }

    // =====================================================================
    // System & Content Management Collections (Admin-focused)
    // =====================================================================
    
    // System-wide configuration settings.
    match /systemConfiguration/{docId} {
      allow read: if request.auth != null; // All users can read settings (e.g., for maintenance mode).
      allow write: if isAdmin(); // Only admins can change settings.
    }
    
    // Audit logs for tracking admin actions.
    match /auditLogs/{logId} {
      allow read, write: if isAdmin(); // Only admins can read/write audit logs.
    }
    
    // Alerts broadcasted to users.
    match /alerts/{alertId} {
      allow read: if request.auth != null; // All users can read alerts to see them.
      allow write: if isAdmin(); // Only admins can create/manage alerts.
    }
    
    // General document library.
    match /documents/{documentId} {
      allow read: if request.auth != null; // All users can read/download documents.
      allow write: if isAdmin(); // Only admins can upload/manage documents.
    }

    // =====================================================================
    // Training & Courses Collections
    // =====================================================================
    
    match /courses/{courseId} {
      allow read: if request.auth != null; // All users can read course info.
      allow write: if isAdmin(); // Only admins manage courses.
    }
    
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /certificateRules/{ruleId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }

    // User's attempts at quizzes.
    match /userQuizAttempts/{attemptId} {
      // Users can read their own attempts. Admins can read anyone's.
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      // Users can create their own attempts. Admins can manage all.
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // In-person training sessions.
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null; // All users can see the schedule.
      allow write: if isAdmin(); // Only admins can create/manage sessions.
    }
    
    // =====================================================================
    // User-Generated Content & Requests
    // =====================================================================

    // Suggestions from users.
    match /suggestions/{suggestionId} {
      allow read: if request.auth != null; // All users can read suggestions to upvote them.
      allow create: if request.auth.uid == request.resource.data.userId; // Users create their own.
      // Users can update to add their UID to the upvotes array. Admins can update status/notes.
      allow update: if isAdmin() || request.auth.uid in request.resource.data.upvotes || !(request.auth.uid in resource.data.upvotes);
      allow delete: if isAdmin();
    }
    
    // Direct requests from users to admins.
    match /requests/{requestId} {
      allow read, update, delete: if isAdmin() || request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Purser flight reports.
    match /purserReports/{reportId} {
      allow read, update: if isAdmin() || request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow delete: if isAdmin();
    }
    
    // Community hub posts.
    match /communityPosts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.authorId;
      // Allow update only for likes, and only by authenticated users.
      allow update: if request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
      allow delete: if isAdmin() || request.auth.uid == resource.data.authorId;
    }
    
    // Documents uploaded by users (passports, licenses).
    match /userDocuments/{docId} {
      allow read, update, delete: if isAdmin() || request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // =====================================================================
    // Operational Collections
    // =====================================================================
    
    // Flight schedules.
    match /flights/{flightId} {
      allow read: if request.auth != null; // All users can read flight schedules.
      // Only admins can create/delete flights or fully update them.
      allow create, delete: if isAdmin();
      // Pursers can update their report status. Admins can update anything.
      allow update: if isAdmin() || (request.auth.uid == resource.data.purserId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['purserReportSubmitted', 'purserReportId']));
    }
    
    // User activity log (leave, flights, training).
    match /userActivities/{activityId} {
      // Admins can manage all activities. Users can only see their own.
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      allow write: if isAdmin();
    }
    
    // Flight swap requests.
    match /flightSwaps/{swapId} {
       allow read: if request.auth != null;
       allow create: if request.auth.uid == request.resource.data.initiatingUserId;
       // Allow update by initiator (to cancel), requester (to request), or admin (to resolve).
       allow update: if isAdmin() || request.auth.uid == resource.data.initiatingUserId || request.auth.uid == request.resource.data.requestingUserId;
       allow delete: if isAdmin();
    }
  }
}
