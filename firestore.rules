
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      // Admin must be authenticated and have 'admin' role in their user document
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow create: if isAdmin(); // Only admins can create users initially. Signup creates Firebase Auth user, Firestore doc might be separate.
                                 // If user signup creates this doc, rule would be: isAuthenticated() && request.auth.uid == userId;

      // Update:
      // - Admins can update any user document.
      // - Authenticated users can update their OWN document, but only specific fields (displayName, fullName).
      // - Other fields like role, email, employeeId, joiningDate, accountStatus should not be changeable by the user themselves.
      allow update: if isAdmin() ||
                     (isAuthenticated() && request.auth.uid == userId &&
                       // Fields user IS ALLOWED to change
                       (request.resource.data.displayName != resource.data.displayName || request.resource.data.fullName != resource.data.fullName || request.resource.data.lastLogin != resource.data.lastLogin) &&
                       // Fields user IS NOT ALLOWED to change (must remain same as existing document)
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.employeeId == resource.data.employeeId &&
                       request.resource.data.joiningDate == resource.data.joiningDate &&
                       request.resource.data.accountStatus == resource.data.accountStatus &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       // Ensure no other unexpected fields are added by the user
                       request.resource.data.keys().hasOnly(['uid', 'email', 'displayName', 'fullName', 'role', 'employeeId', 'joiningDate', 'accountStatus', 'createdAt', 'lastLogin'])
                     );

      allow delete: if isAdmin();
    }

    // Alerts Collection
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // AlertAcknowledgements Collection
    match /alertAcknowledgements/{ackId} {
      // Users can create their own acknowledgements ensuring data integrity
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'alertId', 'acknowledgedAt']) &&
                      request.resource.data.acknowledgedAt == request.time;
      // Users can read their own acknowledgements, Admins can read all
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      // No updates or deletes by users or admins for now to preserve audit trail
      allow update, delete: if false;
    }

    // Documents Collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Flights Collection
    match /flights/{flightId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Quizzes Collection
    match /quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Questions Collection
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // CertificateRules Collection
    match /certificateRules/{ruleId} {
      allow read: if isAuthenticated(); // Rules needed for display or cert generation logic
      allow create, update, delete: if isAdmin();
    }

    // UserTrainingProgress Collection
    match /userTrainingProgress/{progressId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // User can update their own progress, admin can update any. User cannot change the userId field.
      allow update: if isAdmin() ||
                     (isAuthenticated() && resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == resource.data.userId); // userId must not change
      // Only admins can delete progress records for now.
      allow delete: if isAdmin();
    }

    // PurserReports Collection
    match /purserReports/{reportId} {
      // Users can create their own reports, ensuring the userId is their own.
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Users can read their own reports, Admins can read all reports.
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      // Only Admins can update or delete submitted reports.
      allow update, delete: if isAdmin();
    }

    // Requests Collection
    match /requests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow update: if isAdmin(); // Only admins can update (e.g., status, adminResponse)
      allow delete: if isAdmin();
    }

    // UserActivities Collection (for schedule)
    match /userActivities/{activityId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Users can read their own activities. Admins can read all user activities.
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      // Users can update their own activities, ensuring userId doesn't change. Admins can update any.
      allow update: if (isAuthenticated() && resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == resource.data.userId) || isAdmin();
      // Users can delete their own activities. Admins can delete any.
      allow delete: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
    }
  }
}
