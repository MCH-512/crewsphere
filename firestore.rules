rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    // Rules for each collection
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
    }
    
    match /systemConfiguration/{docId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow list: if isAdmin();
      allow write: if isAdmin();
    }
    
    match /flightSwaps/{swapId} {
      allow read: if request.auth != null;
      allow list: if isAdmin();
      allow create: if request.auth != null;
      allow update: if request.auth != null; // Allows users to update their own, and admin to update any
    }

    match /userActivities/{activityId} {
      allow read, create, delete: if request.auth != null; // Users can read/create/delete their own, admin can do it for them
      allow list: if isAdmin();
      allow update: if request.auth.uid == resource.data.userId || isAdmin();
    }

    match /requests/{requestId} {
      allow read, create: if request.auth.uid == resource.data.userId;
      allow list, update, delete: if isAdmin();
    }
    
    match /purserReports/{reportId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
      allow list, delete: if isAdmin();
    }
    
    match /suggestions/{suggestionId} {
      allow read, create: if request.auth != null;
      // Allow update for any authenticated user to handle upvotes
      allow update: if request.auth != null;
      allow list, delete: if isAdmin();
    }
    
    match /communityPosts/{postId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.authorId || isAdmin();
      allow list: if request.auth != null;
    }

    match /documents/{documentId} {
      // Any authenticated user can read. Only admin can write/delete.
      allow read: if request.auth != null;
      allow list, write, delete: if isAdmin();
    }
    
    match /userDocuments/{userDocId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
      allow list, delete: if isAdmin();
    }
    
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow list, create, update, delete: if isAdmin();
    }
    
    match /auditLogs/{logId} {
      allow create: if request.auth != null; // System/functions can write
      allow read, list: if isAdmin();
    }
    
    match /courses/{courseId} {
       allow read: if request.auth != null;
       allow list, create, update, delete: if isAdmin();
    }
    
    match /quizzes/{quizId} {
       allow read: if request.auth != null;
       allow list, create, update, delete: if isAdmin();
    }
    
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow list, create, update, delete: if isAdmin();
    }
    
    match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow list, create, update, delete: if isAdmin();
    }
    
    match /userQuizAttempts/{attemptId} {
      allow read, create: if request.auth.uid == resource.data.userId || isAdmin();
      allow list: if isAdmin();
    }
    
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null;
      allow list, create, update, delete: if isAdmin();
    }
  }
}
