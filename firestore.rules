
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      // Ensure user document exists and role is 'admin'
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && getUserData(request.auth.uid).role == 'admin';
    }

    // users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if (isUser(userId) && !(request.resource.data.role == 'admin')) || isAdmin(); // User can create own doc (no admin role), admin can create any
      allow update: if 
        (isAdmin() && 
          request.resource.data.uid == resource.data.uid && // uid cannot change
          request.resource.data.email == resource.data.email && // email cannot change (via Firestore)
          request.resource.data.createdAt == resource.data.createdAt // createdAt cannot change
          // Admin can change: displayName, fullName, employeeId, joiningDate, role, lastLogin
        ) || 
        (isUser(userId) &&
          request.resource.data.uid == resource.data.uid && // uid cannot change
          request.resource.data.email == resource.data.email && // email cannot change
          request.resource.data.role == resource.data.role && // role cannot be changed by user
          request.resource.data.createdAt == resource.data.createdAt // createdAt cannot change
          // User can change: displayName, fullName, employeeId, joiningDate, lastLogin
        );
      allow delete: if isAdmin();
    }

    // documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // alerts collection
    match /alerts/{alertId} {
      // Users can read global alerts (userId == null) or their own specific alerts
      allow read: if isAuthenticated() && (resource.data.userId == null || resource.data.userId == request.auth.uid);
      allow create, update, delete: if isAdmin(); // Only admins can manage alerts
    }

    // courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // userTrainingProgress collection
    match /userTrainingProgress/{progressId} {
      // Progress ID is typically userId_courseId
      // User can read/write their own progress. Admin can read all, potentially write (e.g., manual completion).
      allow read: if isUser(progressId.split('_')[0]) || isAdmin();
      allow create, update: if isUser(progressId.split('_')[0]) || isAdmin(); // User updates own, admin might override/fix
      allow delete: if isAdmin(); // Generally, progress shouldn't be deleted by users
    }

    // requests collection (e.g., leave requests, schedule changes)
    match /requests/{requestId} {
      allow read: if isUser(resource.data.userId) || isAdmin(); // User can read their own, admin can read all
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // User can create their own
      allow update: if isAdmin(); // Only admin can update status (approved, rejected, etc.)
      allow delete: if isAdmin();
    }

    // purserReports collection
    match /purserReports/{reportId} {
      allow read: if isUser(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // User can create their own
      allow update, delete: if isAdmin(); // Admin can manage/archive
    }

    // flights collection
    match /flights/{flightId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

  }
}
