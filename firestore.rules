
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isPurser() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return role == 'purser' || role == 'admin' || role == 'instructor';
    }
    function isSignedIn() {
      return request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isOwner(userId);
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Audit Logs: Only allow creation by server-side logic (or admins for safety), no client-side reads/updates
    match /auditLogs/{logId} {
        allow read: if isAdmin();
        allow create: if true; // Should be tightened with function calls if using Cloud Functions
        allow update, delete: if false;
    }

    // Community Posts
    match /communityPosts/{postId} {
        allow read: if isSignedIn();
        // Allow create if user is signed in
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        // Allow update only for likes/likeCount
        allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes', 'likeCount']);
        // Only admins can delete posts
        allow delete: if isAdmin();
    }

    // Courses and related sub-collections
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
     match /quizzes/{quizId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
     match /certificateRules/{ruleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /userQuizAttempts/{attemptId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if false;
    }

    // Documents
    match /documents/{documentId} {
        allow read: if isSignedIn();
        // Only admins can create/update/delete library documents
        allow write: if isAdmin();
    }
    
    // User-specific documents
    match /userDocuments/{userDocId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId) || isAdmin();
      // On update, user can only submit for validation, admin can approve
      allow update: if (isOwner(request.resource.data.userId) && request.resource.data.status == 'pending-validation') || isAdmin();
    }
    
    // Flights & Flight Swaps
    match /flights/{flightId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    match /flightSwaps/{swapId} {
        allow read: if isSignedIn();
        // Create is allowed if the user is the initiator
        allow create: if isOwner(request.resource.data.initiatingUserId);
        // Update is complex: either initiator cancels, or another user requests, or admin resolves
        allow update: if (isOwner(resource.data.initiatingUserId) && request.resource.data.status == 'cancelled') ||
                         (isSignedIn() && request.resource.data.status == 'pending_approval') ||
                         isAdmin();
        allow delete: if isAdmin();
    }

    // Purser Reports
    match /purserReports/{reportId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isPurser() && isOwner(request.resource.data.userId);
        allow update: if isAdmin(); // Only admins can update status/notes
        allow delete: if isAdmin();
    }
    
    // Requests
    match /requests/{requestId} {
        allow read, write: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
    }
    
    // Suggestions
    match /suggestions/{suggestionId} {
      allow read: if isSignedIn();
      // User can create, or update their own upvote
      allow create: if isOwner(request.resource.data.userId);
      allow update: if (isSignedIn() && request.resource.data.keys().hasOnly(['upvotes', 'upvoteCount'])) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Training Sessions
    match /trainingSessions/{sessionId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // User Activities (schedule)
    match /userActivities/{activityId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        // Activities are created/deleted via other actions (Flight booking, leave request)
        // Direct client creation/deletion is disallowed for integrity.
        allow create, update, delete: if isAdmin();
    }
    
    // System-wide configuration
    match /systemConfiguration/{configId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}
