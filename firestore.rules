
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper function to check for admin role ---
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // --- User Profiles ---
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Only admins can create or delete user documents directly.
      allow create, delete: if isAdmin();
    }

    // --- User-specific subcollections ---
    match /users/{userId}/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow read, write: if isAdmin();
    }
    
    // --- Generic Collections ---
    function canReadGlobalData() {
        return request.auth != null; // Any authenticated user can read these
    }
    
    match /documents/{docId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }
    
    match /courses/{courseId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }
    
    match /quizzes/{quizId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }
    
     match /questions/{questionId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }

    match /certificateRules/{ruleId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }

    match /communityPosts/{postId} {
        allow read: if canReadGlobalData();
        // Allow create for any authenticated user.
        // Allow update only for likes, and only if it's the user's own like/unlike.
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
    }

    // --- User Activity & Requests ---
    match /userActivities/{activityId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      // User can create their own activity OR an admin can create for anyone.
      allow create: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow write: if isAdmin(); // Only admins can update/delete activities.
    }
    
    match /userQuizAttempts/{attemptId} {
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
    }

    match /requests/{requestId} {
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
    }
    
     match /userDocuments/{docId} {
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
    }

    // --- Admin-only Collections ---
    match /auditLogs/{logId} {
        allow read, write: if isAdmin();
    }

    match /systemConfiguration/{configId} {
        allow read: if request.auth != null; // All authenticated users can read settings.
        allow write: if isAdmin(); // Only admins can change them.
    }

    match /alerts/{alertId} {
        allow read: if request.auth != null; // All can read to display them.
        allow write: if isAdmin();
    }
    
    match /suggestions/{suggestionId} {
        allow read: if canReadGlobalData();
        allow create: if request.auth != null;
        allow update: if request.auth != null && 
                       ( (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount'])) || isAdmin() );
    }

    match /flights/{flightId} {
        allow read: if canReadGlobalData();
        allow write: if isAdmin();
    }

    match /purserReports/{reportId} {
      allow create: if request.auth != null;
      allow read, write: if request.auth != null && (isAdmin() || request.resource.data.userId == request.auth.uid);
    }

    match /trainingSessions/{sessionId} {
      allow read: if canReadGlobalData();
      allow write: if isAdmin();
    }

    match /flightSwaps/{swapId} {
        allow read: if canReadGlobalData();
        // Create if authenticated.
        allow create: if request.auth != null;
        // Update if you are the requesting user or an admin.
        allow update: if request.auth != null && (request.resource.data.requestingUserId == request.auth.uid || isAdmin());
    }

  }
}
