
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Users can read their own profile.
    // Admins can read any user profile.
    // Users can update their own profile (displayName, photoURL).
    // Admins can update any user profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow update: if request.auth != null && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'prefsEmailNotifications', 'prefsScheduleChangeAlerts', 'lastLogin']);
      allow create: if request.auth != null; // Allow user creation on signup
    }
    
    // Admins can manage all user profiles fully
    match /users/{userId} {
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // --- User-Specific Subcollections ---
    match /userProgress/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /userDocuments/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /userQuizAttempts/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /userActivities/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     match /requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid);
    }

    // --- Shared Collections ---
    // All authenticated users can read shared resources. Write access is restricted.
    match /courses/{courseId} {
      allow read: if request.auth != null;
    }
     match /documents/{docId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null; // Allow acknowledging
    }
    match /quizzes/{quizId} {
        allow read: if request.auth != null;
    }
     match /questions/{questionId} {
        allow read: if request.auth != null;
    }
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth.uid == resource.data.authorId || request.auth.uid in resource.data.likes; // Allow liking/unliking and editing own post
    }
     match /suggestions/{suggestionId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid); // Allow upvoting and admin updates
    }
     match /flights/{flightId} {
        allow read: if request.auth != null;
    }
     match /flightSwaps/{swapId} {
        allow read, create, update: if request.auth != null; // Simplified rule for swaps, can be refined
    }
    
    // --- Admin-Only Collections ---
    // Only admins can read or write to these collections.
    match /alerts/{alertId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
    match /auditLogs/{logId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
    match /systemConfiguration/{configId} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
     match /purserReports/{reportId} {
        allow read, write: if request.auth != null && (isAdmin(request.auth.uid) || request.auth.uid == resource.data.userId);
        allow create: if request.auth != null;
    }
      match /trainingSessions/{sessionId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}

    