rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can read their own data, admins can read any
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      // Allow user to update their own non-critical profile info
      allow update: if isAuthenticated() && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'fullName', 'prefsEmailNotifications', 'prefsScheduleChangeAlerts']);
      // Admins can create/update users fully
      allow create, update: if isAdmin();
    }
    
    // Most collections are readable by any authenticated user, writable only by admin
    match /courses/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /quizzes/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /questions/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /certificateRules/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /documents/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /flights/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /alerts/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /communityPosts/{docId} { allow read: if isAuthenticated(); }
    match /suggestions/{docId} { allow read: if isAuthenticated(); }
    match /systemConfiguration/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /auditLogs/{docId} { allow read: if isAdmin(); allow write: if isAdmin(); }

    // Collections users can write to for themselves
    match /requests/{requestId} {
      allow read, create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
    }

    match /suggestions/{suggestionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow any authenticated user to upvote
      allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']);
    }

    match /communityPosts/{postId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow any authenticated user to upvote/like
      allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
      // Allow owner to delete their own post
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /purserReports/{reportId} {
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /alertAcknowledgements/{ackId} {
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow read: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    match /userActivities/{activityId} {
        allow read, create, delete, update: if isAuthenticated() && (request.resource == null || request.resource.data.userId == request.auth.uid) && (resource == null || resource.data.userId == request.auth.uid);
    }
    
     match /userTrainingProgress/{progressId} {
        allow read, create, update: if isAuthenticated() && request.auth.uid == progressId.split('_')[0];
     }
  }
}
