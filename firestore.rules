
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default security rule: Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Data ---
    // Users can read/update their own profile, but cannot delete it. Admins can read anyone's profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // --- System & App Configuration ---
    match /systemConfiguration/{docId} {
      allow read: if request.auth != null; // All authenticated users can read settings
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can write
    }
    
    match /auditLogs/{logId} {
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can read
        allow write: if request.auth != null; // Server-side actions write this
    }

    // --- Core Features ---
    match /alerts/{alertId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /courses/{courseId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /documents/{docId} {
      allow read: if request.auth != null;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /userDocuments/{userDocId} {
        allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;
        allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        // Admin read access is granted through the global user read rule
    }
    
    match /quizzes/{quizId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /questions/{questionId} {
        allow read: if request.auth != null; // Users need to read questions for quizzes
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /certificateRules/{ruleId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     match /userQuizAttempts/{attemptId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
     match /userProgress/{userId}/{path=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userActivities/{activityId} {
        allow read: if request.auth != null;
        allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // --- Collaborative Features ---
    
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    match /suggestions/{suggestionId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update(upvotes): if request.auth != null; // Allow anyone to upvote
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /requests/{requestId} {
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read, update(status), update(adminResponse): if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /flightSwaps/{swapId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null && (request.auth.uid in resource.data.participantIds || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    match /purserReports/{reportId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /trainingSessions/{sessionId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
