
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      // Allow user creation:
      // 1. By an authenticated user for their own UID (typical signup flow, handled by AuthProvider)
      //    - Prevent self-assigning admin role during this process.
      // 2. By an admin for any UID (admin console user creation)
      allow create: if (isUser(userId) && request.resource.data.role != 'admin') || isAdmin();
      
      // Allow user updates:
      // 1. Admins can update role, displayName, fullName, employeeId, joiningDate.
      // 2. Users can update their own displayName, fullName, employeeId, joiningDate but NOT role or email.
      allow update: if isAdmin() || 
                       (isUser(userId) && 
                        request.resource.data.keys().hasOnly(['displayName', 'fullName', 'employeeId', 'joiningDate', 'lastLogin', 'photoURL']) &&
                        (!request.resource.data.keys().hasAny(['role', 'email', 'uid', 'createdAt']))
                       );
      allow delete: if isAdmin(); // Only admins can delete user documents
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read: if isAuthenticated(); // All authenticated users can read alerts
      allow create, update, delete: if isAdmin(); // Only admins can manage alerts
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated(); // All authenticated users can read course listings
      allow create, update, delete: if isAdmin(); // Only admins can manage courses
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated(); // All authenticated users can read/download documents
      allow create, update, delete: if isAdmin(); // Only admins can manage documents
    }

    // Flights collection
    match /flights/{flightId} {
        allow read: if isAuthenticated(); // All authenticated users can read flight info
        allow create, update, delete: if isAdmin(); // Only admins can manage flights
    }
    
    // PurserReports collection
    match /purserReports/{reportId} {
        allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId); // Admins or owner
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId; // Users can create their own reports
        allow update, delete: if isAdmin(); // Only admins can modify/delete
    }

    // Requests collection
    match /requests/{requestId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId); // Admins or owner
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId; // Users can create their own requests
      allow update: if isAdmin(); // Only admins can update status
      allow delete: if isAdmin(); 
    }

    // UserTrainingProgress collection
    // Document ID is expected to be ${userId}_${courseId}
    match /userTrainingProgress/{progressId} {
      allow read: if isAuthenticated() && (isAdmin() || request.auth.uid == progressId.split('_')[0]); // Admin or the user themselves
      allow write: if isAuthenticated() && request.auth.uid == progressId.split('_')[0]; // Only the user can write to their own progress
    }
    
    // Deny all other access by default
    match /{path=**} {
      allow read, write: if false;
    }
  }
}

    