
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Users Collection Rules ---
    // Users can read their own data.
    // Admins can read/write any user data.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Admin-Only Collections ---
    // These collections should only be writeable by admins.
    match /systemConfiguration/{docId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /auditLogs/{logId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /alerts/{alertId} {
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       // Authenticated users can read alerts targeted to them or 'all'
       allow read: if request.auth != null;
    }
    
     // --- Document Management ---
    match /documents/{documentId} {
      // Admins can do anything. Any authenticated user can read.
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- User Documents (self-managed) ---
    match /userDocuments/{userDocId} {
      // Users can manage their own documents. Admins can manage any.
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // --- E-Learning: Courses, Quizzes, Questions ---
    // Anyone can read published courses. Admins can write.
    match /courses/{courseId} {
      allow read: if resource.data.published == true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    // Anyone can read quizzes/questions for a published course. Admins can write.
    match /quizzes/{quizId} {
      allow read: if get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.published == true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /certificateRules/{ruleId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /questions/{questionId} {
      allow read: if get(/databases/$(database)/documents/courses/$(get(/databases/$(database)/documents/quizzes/$(resource.data.quizId)).data.courseId)).data.published == true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- User Progress ---
    match /userQuizAttempts/{attemptId} {
      // Users can manage their own attempts. Admins can read any.
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }


    // --- User-Generated Content ---
    match /requests/{requestId} {
      // Users can manage their own requests. Admins can read/write any.
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    match /suggestions/{suggestionId} {
      // Any authenticated user can create/read. Admins can write.
      allow read, create: if request.auth != null;
      allow update: if (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') || (request.auth.uid in resource.data.upvotes);
    }
    
    // --- Community Hub ---
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update: if request.auth != null && (request.resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Operational Data ---
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /purserReports/{reportId} {
      // Users can manage their own reports. Admins can read/write any.
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    match /userActivities/{activityId} {
      // Users can read their own activities. Admins can read/write any.
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /flightSwaps/{swapId} {
      // Authenticated users can read any swap, but can only update if they are the initiator or admin.
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.initiatingUserId == request.auth.uid;
      allow update: if request.auth != null && (request.resource.data.initiatingUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
  }
}
