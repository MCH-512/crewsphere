rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      // Check for role in the user's document in Firestore.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      // Check if the authenticated user is the owner of the document.
      return request.auth.uid == userId;
    }
    
    function onlySelfUpdatableFieldsChanged() {
      // Defines the fields a user is allowed to update on their own profile.
      // They cannot change their role, email, status, etc.
      let nonUpdatableFields = ['role', 'email', 'accountStatus', 'employeeId', 'joiningDate', 'createdAt', 'lastLogin', 'uid'];
      return !request.resource.data.keys().hasAny(nonUpdatableFields);
    }
    
    function isUpvoting() {
      // Checks if the only field being changed is the 'upvotes' array.
      // This is to allow users to upvote without being able to edit other fields.
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']);
    }

    // --- Collection Rules ---

    // --- User Management ---
    match /users/{userId} {
      // Only the user themselves or an admin can read their data.
      allow read: if isOwner(userId) || isAdmin();
      // Admin can update anything. User can update only specific, non-critical fields.
      allow update: if isAdmin() || (isOwner(userId) && onlySelfUpdatableFieldsChanged());
      // A user can create their own document upon signup, or an admin can create one.
      allow create: if isOwner(userId) || isAdmin();
      // Only admins can delete user documents.
      allow delete: if isAdmin();
    }
    
    // --- Alerts & Notifications ---
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // --- E-Learning & Training ---
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /userQuizAttempts/{attemptId} {
      // A user can read their own quiz attempts, or an admin can.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // A user can only create a quiz attempt for themselves.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- Document & Flight Management ---
    match /documents/{documentId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
     
    match /userDocuments/{docId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create, update, delete: if isAdmin();
    }
    
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // --- User-Generated Content & Scheduling ---
    match /userActivities/{activityId} {
      // Admins manage activities, so only they have write access. Users can read their own.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    match /purserReports/{reportId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // A user can create a report for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Only admins can update the status/notes of a report.
      allow update: if isAdmin();
      allow delete: if isAdmin() || isOwner(resource.data.userId);
    }
    
    match /requests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // A user can create a request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Only admins can update status/response.
      allow update: if isAdmin(); 
    }
    
    match /suggestions/{suggestionId} {
      allow read: if request.auth != null;
      // A user can create a suggestion for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Admins can update status/notes. Users can only update the upvote count.
      allow update: if isAdmin() || (request.auth != null && isUpvoting());
    }
    
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        // A user can create a post for themselves.
        allow create: if isOwner(request.resource.data.userId);
        // Only the owner or an admin can edit a post (e.g. content).
        // Any authenticated user can update the 'likes' array.
        allow update: if (isOwner(resource.data.userId) || isAdmin()) || (request.auth != null && isUpvoting());
        allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // --- System & Audit ---
    match /systemConfiguration/{configId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /auditLogs/{logId} {
      // Only admins can read all logs.
      allow read: if isAdmin();
      // Any authenticated user can trigger actions that create logs.
      allow create: if request.auth != null;
    }
  }
}
