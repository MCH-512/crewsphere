
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user. Users can only read/update their own data.
      allow read: if request.auth != null;
      allow update: if isAdmin() || request.auth.uid == userId;
      // Creation is handled by server-side logic (auth trigger or admin panel)
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rules for 'systemConfiguration'
    match /systemConfiguration/{configId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Rules for 'auditLogs'
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Rules for 'documents' (library)
    match /documents/{docId} {
      // Any authenticated user can read library documents. Admins can manage them.
      allow read: if request.auth != null;
      allow write: if isAdmin();
      // Users can update the 'readBy' array for acknowledgement
      allow update: if request.auth != null && 'readBy' in request.resource.data && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['title', 'description', 'fileURL']));
    }

    // Rules for 'courses', 'quizzes', 'questions', 'certificateRules'
    match /courses/{courseId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
     match /questions/{questionId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    
    // Rules for user-specific data
    match /userQuizAttempts/{attemptId} {
      // Users can create their own attempts.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Users can read their own attempts, Admins can read any.
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      // Nobody can update/delete attempts.
      allow update, delete: if false;
    }

    match /userDocuments/{docId} {
        allow create: if request.auth.uid == request.resource.data.userId;
        allow read, update: if isAdmin() || request.auth.uid == resource.data.userId;
        allow delete: if isAdmin();
    }

    match /requests/{reqId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update: if isAdmin() || request.auth.uid == resource.data.userId;
       allow delete: if false; // Requests should be archived, not deleted
    }

    match /suggestions/{sugId} {
       allow create: if request.auth != null;
       allow read: if request.auth != null;
       // Only admins can update status/notes. Users can update upvotes.
       allow update: if isAdmin() || (request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']));
       allow delete: if isAdmin();
    }
    
     match /purserReports/{reportId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update: if isAdmin() || request.auth.uid == resource.data.userId;
       allow delete: if isAdmin();
    }

    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId;
        allow update: if (isAdmin() || request.auth.uid == resource.data.authorId) || (request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']));
        allow delete: if isAdmin() || request.auth.uid == resource.data.authorId;
    }
    
    // Open read access for Flights and Training sessions for the timeline
    match /flights/{flightId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    match /trainingSessions/{sessionId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    match /userActivities/{activityId} {
        allow read: if isAdmin() || request.auth.uid == resource.data.userId;
        allow create, update, delete: if isAdmin();
    }

    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /flightSwaps/{swapId} {
      // Any authenticated user can read swap posts to browse the board.
      allow read: if request.auth != null;
      // Creating is posting your own flight, so userId must match.
      allow create: if request.auth.uid == request.resource.data.initiatingUserId;
      // Updating is for requesting a swap or for an admin to resolve it.
      allow update: if (isAdmin()) || (request.auth.uid == request.resource.data.requestingUserId) || (request.auth.uid == resource.data.initiatingUserId);
      allow delete: if false; // Swaps should be cancelled/rejected, not deleted.
    }

  }
}
