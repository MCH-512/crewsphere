rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if user is authenticated and has the 'admin' role in their user document.
      // This get() call requires that users can at least read their own role.
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users Collection: Admins can manage all. Users can read/write their own document.
    match /users/{userId} {
      allow read, write: if isAdmin() || isOwner(userId);
    }
    
    // System Configuration: Admins only.
    match /systemConfiguration/{configId} {
      allow read, write: if isAdmin();
    }

    // Alerts: Admins write, all authenticated users can read.
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Alert Acknowledgements: Users can create/read their own. Admins can read all.
    match /alertAcknowledgements/{ackId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // Audit Logs: Admin read-only. Write should be done from a trusted server environment.
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; 
    }
    
    // --- Training Module ---
    // Course-related content is readable by all users, writable only by admins.
    match /courses/{courseId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /quizzes/{quizId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /questions/{questionId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /certificateRules/{ruleId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /trainingSessions/{sessionId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }

    // User Training Progress: Users can only manage their own progress. Admins can read all.
    match /userTrainingProgress/{progressId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow write: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // --- Operations Module ---
    match /documents/{docId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }
    match /flights/{flightId} { allow read: if isAuthenticated(); allow write: if isAdmin(); }

    // User Activities: Users can be assigned activities by Admins, or manage their own non-flight activities.
    match /userActivities/{activityId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAdmin() || (isAuthenticated() && request.resource.data.userId == request.auth.uid);
      // Users can only update comments or time on their own non-flight/training activities. Admins can update anything.
      allow update: if isAdmin() || 
                     (isAuthenticated() && resource.data.userId == request.auth.uid && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments', 'startTime', 'endTime']));
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
    
    // Purser Reports: Users can create/read their own. Admins read all. Reports are immutable.
    match /purserReports/{reportId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; 
    }

    // --- Communication & HR ---
    // Requests: Users create/read their own. Admins can read all and update status/response.
    match /requests/{requestId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
    }

    // Suggestions: Any user can create/read. Users can only update the upvote count. Admins can update status.
    match /suggestions/{suggestionId} {
      allow read, create: if isAuthenticated();
      allow update: if (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount'])) ||
                     (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'adminNotes']));
    }

    // Community Posts: Any user can create/read. Users can only update likes on posts or delete their own posts.
    match /communityPosts/{postId} {
      allow read, create: if isAuthenticated();
      allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
  }
}
