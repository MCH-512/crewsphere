
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Ensure request.auth is not null before trying to access its properties
      return request.auth != null && request.auth.uid != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if (isAuthenticated() && request.auth.uid == userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Flights collection
    match /flights/{flightId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Courses, Quizzes, Questions, CertificateRules
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    match /certificateRules/{ruleId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // UserTrainingProgress
    match /userTrainingProgress/{progressId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId
                    && request.resource.data.userId is string // Ensure userId is present and a string
                    && request.resource.data.courseId is string // Ensure courseId is present and a string
                    && request.resource.data.contentStatus is string
                    && request.resource.data.quizStatus is string
                    && request.resource.data.lastUpdated == request.time;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId
                    && request.resource.data.lastUpdated == request.time;
      allow delete: if isAdmin();
    }

    // PurserReports
    match /purserReports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId
                    && request.resource.data.userId is string
                    && request.resource.data.userEmail is string
                    && request.resource.data.reportInput is map
                    && request.resource.data.reportOutput is map
                    && request.resource.data.status == "submitted"
                    && request.resource.data.createdAt == request.time;
      allow update, delete: if isAdmin();
    }

    // User Requests
    match /requests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId
                    && request.resource.data.userId is string
                    && request.resource.data.userEmail is string
                    && request.resource.data.requestType is string
                    && request.resource.data.urgencyLevel is string
                    && request.resource.data.subject is string
                    && request.resource.data.details is string
                    && request.resource.data.status == "pending"
                    && request.resource.data.createdAt == request.time;
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId && !('status' in request.resource.data));
      allow delete: if isAdmin();
    }

    // User Activities (schedule)
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId
                     && request.resource.data.userId is string
                     && request.resource.data.activityType is string
                     && request.resource.data.date is timestamp
                     && request.resource.data.createdAt == request.time;
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Alert Acknowledgements
    match /alertAcknowledgements/{ackId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      // Create: User can create their own ack.
      //         - userId in doc must match auth user's ID.
      //         - alertId must be a string.
      //         - acknowledgedAt must be server timestamp.
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.alertId is string
                    && request.resource.data.acknowledgedAt == request.time;
      allow update: if false; // Acknowledgements are immutable.
      allow delete: if false; // No deletion by users or admins for now.
    }
  }
}

    