
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      // Check if the user is authenticated and their user document has role 'admin'
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    // (typically used when the document ID is the user's UID or the document has a userId field)
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    // Users can read all profiles (e.g., for display names)
    // Users can create their own user document (on signup)
    // Users can update their own profile, Admins can update any profile
    // Only Admins can delete user documents
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Generic rule for collections primarily managed by Admins
    // Authenticated users can read, Admins can write (create, update, delete)
    match /{collectionName}/{docId}
      where collectionName in ['courses', 'quizzes', 'questions', 'certificateRules', 'documents', 'alerts', 'flights'] {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // User specific training progress
    // progressId is typically structured as `${userId}_${courseId}`
    // Users can read and write their own progress. Admins can read any progress.
    match /userTrainingProgress/{progressId} {
      allow read: if request.auth != null && (isOwner(progressId.split('_')[0]) || isAdmin());
      allow write: if request.auth != null && isOwner(progressId.split('_')[0]);
    }

    // User requests
    // Users can create requests for themselves.
    // Users can read their own requests. Admins can read all requests.
    // Only Admins can update (e.g., status) or delete requests.
    match /requests/{requestId} {
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow read: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Purser Reports
    // Users can create their own reports.
    // Users can read their own reports. Admins can read all reports.
    // Only Admins can update or delete reports.
    match /purserReports/{reportId} {
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow read: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny for any other paths not explicitly matched.
    // This is a security best practice.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
