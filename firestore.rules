
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Deny all reads and writes by default.
    // This is a secure default. You must explicitly
    // enable access to specific collections.
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow users to read and write their own documents
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
    }

    // Allow logged-in users to read from collections they need
    match /courses/{docId} {
      allow read: if request.auth != null;
    }
    match /documents/{docId} {
      allow read: if request.auth != null;
    }
    match /flights/{docId} {
      allow read: if request.auth != null;
    }
    
    // Allow users to manage their own specific sub-collections or documents
     match /userDocuments/{docId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
     match /userQuizAttempts/{docId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
     match /userActivities/{docId} {
      allow read, create, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Community hub: must be logged in to read, can only create/edit own posts
    match /communityPosts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (
        (request.resource.data.likes != resource.data.likes && request.resource.data.authorId == resource.data.authorId) || // allow liking
        (request.auth.uid == resource.data.authorId) // allow owner to edit
      );
    }
    
    // Requests: users can create for themselves, admins can update
    match /requests/{requestId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Suggestions: logged-in users can create, can only upvote, admin can update status
    match /suggestions/{suggestionId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update: if request.auth != null && (
            (request.resource.data.upvotes != resource.data.upvotes) || // allow upvoting
            (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // allow admin to update status/notes
        );
    }
    
    // Admin-only write access for core collections
    match /alerts/{alertId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /trainingSessions/{sessionId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Safety reports are write-only for authenticated users to ensure confidentiality. Admins read them through backend functions.
    match /safetyReports/{reportId} {
        allow read: if false; // No one can read directly.
        allow create: if request.auth != null;
    }
  }
}
