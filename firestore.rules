rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // By default, deny all reads and writes.
    // This is a secure default, and you must explicitly enable access
    // to specific collections below.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Example: Allow public read access to a 'courses' collection
    // match /courses/{courseId} {
    //   allow read: if true;
    //   allow write: if request.auth != null && request.auth.token.role == 'admin';
    // }

    // Allow users to read/write their own documents, and admins to read/write any.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || (request.auth.token.role != null && request.auth.token.role == 'admin');
      allow create: if request.auth.uid == userId;
    }

    match /userActivities/{activityId} {
        allow read, create, delete, update: if request.auth != null; // Users can manage their own activities
    }
    
    match /userDocuments/{docId} {
        allow read, create, update: if request.auth.uid == resource.data.userId;
        allow read, update: if request.auth.token.role == 'admin';
    }

    match /requests/{reqId} {
        allow read, create: if request.auth.uid == resource.data.userId;
        allow read, update: if request.auth.token.role == 'admin';
    }
    
    match /suggestions/{sugId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null; // Allow anyone to upvote
    }

    match /communityPosts/{postId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null; // Allow anyone to like
    }
    
    // Allow any authenticated user to read courses, questions, etc.
    match /courses/{courseId} {
      allow read: if request.auth != null;
    }
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
    }
     match /questions/{questionId} {
      allow read: if request.auth != null;
    }
     match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
    }
     match /documents/{docId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null; // For read receipts
    }
    match /userQuizAttempts/{attemptId} {
      allow read, create: if request.auth.uid == resource.data.userId;
    }
     match /userProgress/{userId}/{courseCollection}/{courseId} {
      allow read, write: if request.auth.uid == userId;
    }
    
     match /flights/{flightId} {
      allow read: if request.auth != null;
    }
     match /flightSwaps/{swapId} {
       allow read, create: if request.auth != null;
       allow update: if request.auth.uid == resource.data.initiatingUserId || (request.auth.token.role != null && request.auth.token.role == 'admin');
    }
     match /purserReports/{reportId} {
       allow read, create, update: if request.auth.uid == resource.data.userId;
       allow read, update: if request.auth.token.role == 'admin';
     }
    

    // Admin-only collections
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /alerts/{alertId} {
      allow read, write: if isAdmin();
    }
    
    match /auditLogs/{logId} {
      allow read, create: if isAdmin();
    }
     match /systemConfiguration/{configId} {
      allow read, write: if isAdmin();
    }
     match /safetyReports/{reportId} {
      allow read, create: if request.auth != null; // Any user can submit
      allow write: if isAdmin(); // Only admin can update status etc.
    }
  }
}
