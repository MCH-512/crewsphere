
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the authenticated user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read; // Allow any authenticated user to read any user profile (for display names, etc.)
      allow write: if request.auth != null && request.auth.uid == userId; // User can only write to their own document
      // Admins can read/write any user document
      allow read, write: if isAdmin();
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read; // All users can read alerts
      // Only admins can create/update/delete alerts
      allow create, update, delete: if isAdmin();
    }

    // Documents collection
    match /documents/{documentId} {
      allow read; // All users can read documents
      // Only admins can create/update/delete documents
      allow create, update, delete: if isAdmin();
    }

    // Flights collection
    match /flights/{flightId} {
      allow read; // All users can read flight info
      // Only admins can create/update/delete flights
      allow create, update, delete: if isAdmin();
    }

    // Requests collection (user-submitted requests)
    match /requests/{requestId} {
      // User can create their own requests
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // User can read their own requests
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Admins can read and update (e.g., status) any request
      allow read, update: if isAdmin();
      // Generally, users should not be able to delete requests, nor update arbitrary fields.
      allow delete: if false;
    }

    // Purser Reports collection
    match /purserReports/{reportId} {
        // Authenticated users can create their own reports
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read and manage all reports
        allow read, update, delete: if isAdmin();
    }

    // Course-related collections
    match /courses/{courseId} {
      allow read; // All users can read course information
      allow create, update, delete: if isAdmin();
    }

    match /quizzes/{quizId} {
      allow read; // All users can read quiz information (related to a course)
      allow create, update, delete: if isAdmin();
    }

    match /questions/{questionId} {
      // Questions are typically read as part of a quiz. Direct read might be limited.
      // For simplicity, allow authenticated users to read (access control via quiz/course enrollment is ideal).
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /certificateRules/{ruleId} {
      // Rules might be read by users if details are shown, or by admins.
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /userTrainingProgress/{progressId} {
      function isOwner() {
        // Check if the authenticated user is the owner of the document
        return request.auth != null && resource.data.userId == request.auth.uid;
      }
       function isCreatingOwner() {
        // Check if the authenticated user is creating their own document
        return request.auth != null && request.resource.data.userId == request.auth.uid;
      }

      allow read, write: if isOwner(); // User can read/write their own progress
      allow create: if isCreatingOwner(); // User can create their own progress doc
      // Admins can read any user's progress
      allow read: if isAdmin();
      // Admins generally shouldn't directly write to user progress unless for specific corrections (can be added if needed)
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
