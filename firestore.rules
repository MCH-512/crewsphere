rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Allow if the user is authenticated and their user document has the 'admin' role.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // Any authenticated user can read their OWN profile document.
      allow get: if isOwner(userId) || isAdmin();
      // Only an admin can LIST all users.
      allow list: if isAdmin();
      // Users can update their own profile. Admins can update any profile.
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // System-wide Configuration
    match /systemConfiguration/{configId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // Alerts
    match /alerts/{alertId} {
        allow list, get: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Audit Logs - Read by admins only, no client-side writes.
    match /auditLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false;
    }

    // Flights and User Activities
    match /flights/{flightId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    match /userActivities/{activityId} {
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // Training: Courses, Quizzes, Questions, Attempts, Certificate Rules
    match /courses/{courseId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
     match /quizzes/{quizId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
     match /questions/{questionId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    match /certificateRules/{ruleId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    match /userQuizAttempts/{attemptId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if isAdmin();
    }
    match /userProgress/{userId}/courses/{courseId} {
        allow read, write: if isOwner(userId);
    }
    
    // Documents: Main library and user-specific
    match /documents/{docId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    match /userDocuments/{userDocId} {
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Community Features
    match /communityPosts/{postId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null; // For likes
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
     match /suggestions/{suggestionId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null; // For upvoting & status changes by admin
        allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Requests
    match /requests/{requestId} {
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Flight Swaps
    match /flightSwaps/{swapId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if request.auth != null; // Simplification, can be refined
    }
    
    // Training Sessions
    match /trainingSessions/{sessionId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}
