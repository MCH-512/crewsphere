
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // It's good practice to check for document existence before accessing .data
    function getUserDoc(uid) {
      return /databases/$(database)/documents/users/$(uid);
    }

    function userExists(uid) {
      return exists(getUserDoc(uid));
    }

    function getUserData(uid) {
      return get(getUserDoc(uid)).data;
    }

    function isAdmin(uid) {
      return userExists(uid) && getUserData(uid).role == 'admin';
    }

    function isPurser(uid) {
      return userExists(uid) && getUserData(uid).role == 'purser';
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile (e.g., for display names, roles by client for UI).
      // If more privacy is needed, change to: isUser(userId) || isAdmin(request.auth.uid)
      allow read: if isAuthenticated();

      // Users can create their own user document on signup (cannot set self as admin).
      // Admins can create any user document.
      allow create: if (isUser(userId) && request.resource.data.uid == userId &&
                        (!('role' in request.resource.data) || request.resource.data.role != 'admin'))
                     || (isAuthenticated() && isAdmin(request.auth.uid));

      // Users can update their own non-critical fields.
      // Admins can update user fields (except uid and email which are auth properties).
      allow update: if (isUser(userId) &&
                        request.resource.data.uid == resource.data.uid &&        // uid cannot change
                        request.resource.data.email == resource.data.email &&    // email cannot change via Firestore
                        request.resource.data.role == resource.data.role)        // role cannot be changed by user themselves
                     || (isAuthenticated() && isAdmin(request.auth.uid) &&
                         request.resource.data.uid == resource.data.uid &&        // uid cannot change
                         request.resource.data.email == resource.data.email);   // email cannot change via Firestore (it's an auth property)

      // Deletion should generally be handled by backend functions if needed for GDPR, etc.
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can delete user documents
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Admin can create, update, delete
    }

    // Alerts collection
    match /alerts/{alertId} {
      // User can read their specific alerts or global alerts, Admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || resource.data.userId == null || isAdmin(request.auth.uid));
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Admin can create, update, delete
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Admin can create, update, delete
    }

    // User Training Progress collection
    // Assumes progressId is structured like `${userId}_${courseId}`
    match /userTrainingProgress/{progressId} {
      // User can read/write their own progress. Admins can manage all.
      allow read, write: if isAuthenticated() &&
                           (request.auth.uid == progressId.split('_')[0] || isAdmin(request.auth.uid));
    }

    // Requests collection
    match /requests/{requestId} {
      // User can create their own request, ensuring the userId in the request matches their auth uid
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // User can read their own requests, Admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
      // Only Admins can update requests (e.g., status) or delete them
      allow update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Purser Reports collection
    match /purserReports/{reportId} {
      // Pursers or Admins can create reports. Ensure userId in report matches creator's auth uid.
      allow create: if isAuthenticated() &&
                       (isPurser(request.auth.uid) || isAdmin(request.auth.uid)) &&
                       request.resource.data.userId == request.auth.uid;
      // Admins can read all reports. (Could be extended if pursers need to read their own submitted reports)
      allow read: if isAuthenticated() && isAdmin(request.auth.uid);
      // Only Admins can update or delete reports
      allow update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Flights collection
    match /flights/{flightId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Admin can create, update, delete
    }
  }
}
