rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    // -- Critical Change --
    // Allow any authenticated user to read their own profile.
    // This is ESSENTIAL for the isAdmin() function to work correctly in other rules.
    // Also explicitly allow admins to list all users.
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // System-wide Configuration
    match /systemConfiguration/{configId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // Alerts
    match /alerts/{alertId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Audit Logs
    match /auditLogs/{logId} {
        allow list, get: if isAdmin();
        allow create, update, delete: if false; // Only backend can create
    }

    // Flights and User Activities
    match /flights/{flightId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    match /userActivities/{activityId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // Training Content
    match /courses/{courseId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
     match /quizzes/{quizId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
     match /questions/{questionId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    match /certificateRules/{ruleId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // User Progress
    match /userQuizAttempts/{attemptId} {
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if isAdmin();
    }
     match /userProgress/{userId}/courses/{courseId} {
      allow read, write: if isOwner(userId);
    }
    
    // Documents
    match /documents/{docId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    match /userDocuments/{userDocId} {
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Community Features
    match /communityPosts/{postId} {
        allow read, list: if request.auth != null;
        allow create, update: if request.auth != null;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
     match /suggestions/{suggestionId} {
        allow read, list: if request.auth != null;
        allow create, update: if request.auth != null;
        allow delete: if isAdmin();
    }
    
    // Requests
    match /requests/{requestId} {
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isAdmin();
    }

    // Flight Swaps
    match /flightSwaps/{swapId} {
        allow read, list: if request.auth != null;
        allow create, update: if request.auth != null;
        allow delete: if isAdmin();
    }
    
    // Training Sessions
    match /trainingSessions/{sessionId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}
