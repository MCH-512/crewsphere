rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // USERS collection
    // Users can read their own data.
    // Admins can read/write any user's data.
    // New users can create their own document upon signup.
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow write: if isAdmin();
      allow create: if isAuthenticated(); // For initial user profile creation
    }

    // ALERTS collection
    // Readable by all authenticated users (client-side filtering applies).
    // Writable only by admins.
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // AUDIT LOGS collection
    // Writable by server-side logic (or admins for manual entries). Read-only for admins.
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // Logged by server functions / actions with user auth
      allow update, delete: if false; // Logs are immutable
    }

    // COMMUNITY POSTS collection
    // Readable by all authenticated users.
    // Users can create posts.
    // Users can only update their own posts (or admins).
    // Users can only delete their own posts (or admins).
    match /communityPosts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }
    
    // COURSES and related collections
    // All authenticated users can read published courses. Admins can write anything.
    match /courses/{courseId} {
      allow read: if isAuthenticated() && resource.data.published == true;
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // USER PROGRESS on courses
    match /userProgress/{userId}/courses/{courseId} {
      allow read, write: if isUser(userId);
    }
    
     // USER QUIZ ATTEMPTS
    match /userQuizAttempts/{attemptId} {
        allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if false; // Attempts are immutable
    }
    
    // FLIGHTS collection
    // Users can read a flight if they are part of the crew. Admins can read all.
    // Writable only by admins.
    match /flights/{flightId} {
      allow read: if isAuthenticated() && (request.auth.uid in resource.data.allCrewIds || isAdmin());
      allow write: if isAdmin();
    }
    
    // PURSER REPORTS collection
    // Users can read/create their own reports. Admins can read/write all.
    match /purserReports/{reportId} {
        allow read, write: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
        allow create: if isAuthenticated();
    }
    
    // DOCUMENTS library
    // Readable by all authenticated users. Writable only by admins.
    match /documents/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      allow update: if (isAdmin() || (isAuthenticated() && request.resource.data.readBy == resource.data.readBy.concat([request.auth.uid]))); // Allow users to add themselves to readBy
    }
    
    // USER DOCUMENTS (passports, licenses)
    // Users can manage their own documents. Admins can read/write all.
    match /userDocuments/{userDocId} {
      allow read, write: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow create: if isAuthenticated();
    }

    // FLIGHT SWAPS collection
    // Authenticated users can read/create swaps.
    // Can only be updated if the user is a participant or an admin.
    match /flightSwaps/{swapId} {
      allow read, create: if isAuthenticated();
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || isAdmin());
    }

    // REQUESTS collection
    // Users can manage their own requests. Admins can read/write all.
    match /requests/{requestId} {
       allow read, write: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
       allow create: if isAuthenticated();
    }
    
    // SUGGESTIONS collection
    // Readable by all authenticated users. Writable by creator or admin.
    match /suggestions/{suggestionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
    }
    
    // TRAINING SESSIONS collection
    // Readable by all authenticated users. Writable only by admins.
    match /trainingSessions/{sessionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // USER ACTIVITIES collection (Schedule)
    // Users can only access their own schedule. Admins can read all.
    match /userActivities/{activityId} {
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow write: if isAdmin(); // Only admins can create/modify schedule entries directly
      allow create: if isAuthenticated(); // Allow manual activity creation
    }

    // SYSTEM CONFIGURATION
    // Read-only for authenticated users, writable only by admins.
    match /systemConfiguration/{configId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
  }
}
