
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isRole(roleName) {
       return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == roleName;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if isAuthenticated(); // All authenticated users can read user profiles (e.g., for display names)
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid; // User can create their own doc (signup)
                      // Ensure required fields are present at creation, and role is not admin unless by admin
      allow update: if (isUser(userId) && 
                        !('role' in request.resource.data && request.resource.data.role != resource.data.role) && // User cannot change their own role
                        !('email' in request.resource.data && request.resource.data.email != resource.data.email) && // User cannot change their own email
                        !('employeeId' in request.resource.data && request.resource.data.employeeId != resource.data.employeeId) // User cannot change their own employeeId
                       ) || isAdmin(); // Admin can update any field
      allow delete: if isAdmin();
    }

    // ALERTS collection
    match /alerts/{alertId} {
      allow read: if isAuthenticated(); // All authenticated users can read alerts
      allow create, update, delete: if isAdmin(); // Only admins can manage alerts
    }

    // ALERTACKNOWLEDGEMENTS collection
    match /alertAcknowledgements/{ackId} {
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.alertId is string &&
                       request.resource.data.acknowledgedAt == request.time;
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow update, delete: if false; // Generally, acknowledgements are immutable
    }

    // DOCUMENTS collection
    match /documents/{documentId} {
      allow read: if isAuthenticated(); // All authenticated users can read documents
      allow create, update, delete: if isAdmin(); // Only admins can manage documents
    }
    
    // FLIGHTS collection
    match /flights/{flightId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    // USERACTIVITIES collection (for schedule)
    match /userActivities/{activityId} {
        allow read, create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin(); // User can manage own, admin can manage all
    }

    // COURSES collection
    match /courses/{courseId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    // QUIZZES collection
    match /quizzes/{quizId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    // QUESTIONS collection (for quizzes)
    match /questions/{questionId} {
        allow read: if isAuthenticated(); // Typically read as part of a quiz by users taking it
        allow create, update, delete: if isAdmin();
    }

    // CERTIFICATERULES collection
    match /certificateRules/{ruleId} {
        allow read: if isAuthenticated(); // Users might read rules indirectly via course display
        allow create, update, delete: if isAdmin();
    }

    // USERTRAININGPROGRESS collection
    match /userTrainingProgress/{progressId} {
      allow read, create, update: if isAuthenticated() && 
                                     (request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid); // User can manage their own progress
                                     // Ensure userId is always set to current user on create/update by user
                                     // Ensure only specific fields are updatable by user (e.g., contentStatus, quizStatus, quizScore)
      allow delete: if isAdmin(); // Admin can delete progress records if necessary
    }

    // PURSERREPORTS collection
    match /purserReports/{reportId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // Pursers/users create their own reports
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin(); // User can read their own, admin can read all
      allow update, delete: if isAdmin(); // Only admin can modify or delete
    }

    // REQUESTS collection (user requests)
    match /requests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow update: if isAdmin(); // Only admins can update (e.g., status, adminResponse)
      allow delete: if isAdmin();
    }

    // SYSTEMCONFIGURATION collection
    match /systemConfiguration/{configId} {
      allow read: if isAuthenticated(); // Allow authenticated users to read settings (e.g. for maintenance mode check)
      allow write: if isAdmin(); // Only admins can write system settings
    }

  }
}
