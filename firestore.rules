
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      // Check if the user document exists and has the role 'admin'
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isSignedIn() {
      // Check if the user is authenticated
      return request.auth != null;
    }

    // --- Collections ---

    // USERS: Users can read their own data, admins can read anyone's data.
    // Users can update their own data, admins can update anyone's.
    match /users/{userId} {
      allow read, update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create: if isAdmin(); // Only admins can create users via the backend panel
      allow delete: if isAdmin();
    }

    // ALERTS & ACKNOWLEDGEMENTS: Users can read alerts. Admins can write them. Users manage their own acks.
    match /alerts/{alertId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /alertAcknowledgements/{ackId} {
      allow read, write: if isSignedIn() && ackId.split('_')[0] == request.auth.uid;
    }

    // DOCUMENTS: Users can read. Admins can write.
    match /documents/{documentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // COURSES & LEARNING: Users can read all course content. Admins can manage it.
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // USER TRAINING PROGRESS: Users can only read/write their own progress records.
    match /userTrainingProgress/{progressId} {
      allow read: if isSignedIn() && (progressId.split('_')[0] == request.auth.uid || isAdmin());
      allow write: if isSignedIn() && progressId.split('_')[0] == request.auth.uid;
    }
    
    // FLIGHTS: Users can read. Admins can write.
    match /flights/{flightId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // USER ACTIVITIES (SCHEDULE): Users can only manage their own schedule.
    match /userActivities/{activityId} {
        allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // PURSER REPORTS: Users create their own, can read their own. Admins can read all.
    match /purserReports/{reportId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow update, delete: if isAdmin();
    }

    // USER REQUESTS: Users create their own, can read their own. Admins can manage all.
    match /requests/{requestId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow update, delete: if isAdmin();
    }

    // SUGGESTIONS: Users can read/create. Can only update the upvote count on others' suggestions.
    match /suggestions/{suggestionId} {
      allow read, create: if isSignedIn();
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']));
      allow delete: if isAdmin();
    }

    // SYSTEM & LOGGING: Read-only for users, write access for admins.
    match /systemConfiguration/{configId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    match /auditLogs/{logId} {
        allow read, write: if isAdmin();
    }
  }
}
