
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER DATA
    // Users can read/write their own user document. Admins can read/write any.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // ALERTS & NOTIFICATIONS
    // Any authenticated user can read alerts. Admins can write.
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    // Users can only create/read their own alert acknowledgements.
    match /alertAcknowledgements/{ackId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // Immutable for auditing
    }
    
    // COURSES & LEARNING
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    match /questions/{questionId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    // Users can read/write their own progress. Admins can read anyone's.
    match /userTrainingProgress/{progressId} {
      allow read, write: if (request.auth != null && request.auth.uid == progressId.split('_')[0]) || isAdmin();
    }

    // DOCUMENTS
    match /documents/{documentId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // FLIGHTS & SCHEDULE
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    // Users can read and write their own activities. Admins can read all.
    match /userActivities/{activityId} {
       allow read, write: if request.auth.uid == resource.data.userId || (request.resource != null && request.auth.uid == request.resource.data.userId);
       allow read: if isAdmin();
       allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }

    // TRAINING SESSIONS
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // REPORTS & REQUESTS
    // Users can create/read their own reports. Admins can read all.
    match /purserReports/{reportId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow update, delete: if false; // Immutable
    }
    // Users can create/read their own requests. Admins can read/update all.
    match /requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow update: if isAdmin();
      allow delete: if false; // Disallow deletion
    }
    
    // COMMUNITY & FEEDBACK
    // Users can read all posts.
    match /communityPosts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId || isAdmin();
      allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    match /suggestions/{suggestionId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.userId;
      // Admins can update status, any user can update the 'upvotes' field.
      allow update: if isAdmin() || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']));
    }

    // SYSTEM & AUDIT
    match /systemConfiguration/{configId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    match /auditLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Server-side only
    }

  }
}
