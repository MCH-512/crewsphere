
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default: Deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users Collection
    match /users/{userId} {
      // Any authenticated user can read any user's public profile info
      allow read: if request.auth != null;
      // Only the user themselves or an admin can update their own document
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Only admins can create or delete user documents (managed through dedicated admin panel)
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Alerts Collection
    match /alerts/{alertId} {
      // Any authenticated user can read any alert
      allow read: if request.auth != null;
      // Only admins can create, update, or delete alerts
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Alert Acknowledgements Collection
    match /alertAcknowledgements/{ackId} {
       // A user can read their own acknowledgement
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
       // A user can only create an acknowledgement for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Nobody can update or delete acknowledgements to maintain audit trail
      allow update, delete: if false;
    }
    
    // Audit Logs Collection
    match /auditLogs/{logId} {
      // Only admins can read audit logs
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Nobody can write directly to audit logs from the client (should be done via backend/secure functions, but for now we lock it)
      // The logAuditEvent function is a client-side utility, so we need to allow creates by admins who are performing actions.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update, delete: if false;
    }

    // Documents Collection
    match /documents/{documentId} {
        // Any authenticated user can read documents
        allow read: if request.auth != null;
        // Only admins can create, update, or delete documents
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Courses and related collections
    match /courses/{courseId} {
        // Any authenticated user can read published courses
        allow read: if request.auth != null && resource.data.published == true;
        // Admins can read any course (published or not)
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Only admins can create, update, or delete courses
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /quizzes/{quizId} {
        // Allow read if the user can read the associated course
        allow read: if request.auth != null; // Simplified for now
        // Only admins can manage quizzes
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /questions/{questionId} {
       // Allow read if the user can read the associated course
       allow read: if request.auth != null; // Simplified for now
       // Only admins can manage questions
       allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /certificateRules/{ruleId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User Training Progress
    match /userTrainingProgress/{progressId} {
        // A user can read and write to their own progress document.
        // The document ID is structured as `userId_courseId`.
        allow read, write: if request.auth != null && request.auth.uid == progressId.split('_')[0];
        // Admins can read any progress document for reporting purposes
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Flights Collection
    match /flights/{flightId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User Activities (Roster/Schedule) Collection
    match /userActivities/{activityId} {
        // A user can read and write to their own activity document
        allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
        // A user can create their own activity
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read any user's activities
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Purser Reports Collection
    match /purserReports/{reportId} {
        // User can create their own report
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // User can read their own reports
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        // Admins can read any report
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Nobody can update/delete reports to maintain data integrity
        allow update, delete: if false;
    }
    
    // Requests (Leave, Roster Change, etc.) Collection
    match /requests/{requestId} {
        // User can create their own request
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // User can read their own requests
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        // Admins can read any request and update its status/response
        allow read, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Only admins can delete requests
        allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // System Configuration
    match /systemConfiguration/{configId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Suggestion Box
    match /suggestions/{suggestionId} {
      // Any authenticated user can read all suggestions
      allow read: if request.auth != null;
      // Any authenticated user can create a suggestion
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Admins can update status and notes
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Any authenticated user can update the upvotes array
      allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']);
    }
    
    // Crew Community Posts
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

        // Allow owner to update content/image OR any user to update likes
        allow update: if (request.auth != null && resource.data.userId == request.auth.uid) || 
                       (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']));
    }

  }
}
