
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function isAdmin() {
      // Check if the user document exists before trying to access its data.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- COLLECTION RULES ---

    // Users: Read-only for admins, self-read/write for logged-in users.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin();
    }

    // Alerts: Admin write, logged-in user read.
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Alert Acknowledgements: User can only create/read their own.
    match /alertAcknowledgements/{ackId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // Disallow modification/deletion
    }

    // Suggestions: Logged-in users can create. Anyone can read. Admins can update status.
    match /suggestions/{suggestionId} {
      allow read, create, update: if request.auth != null;
      allow delete: if isAdmin();
    }

    // Courses & related content: Admin write, logged-in read.
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
     match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /userTrainingProgress/{progressId} {
       allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Documents: Admin write, logged-in read.
    match /documents/{documentId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // System Configuration: Admin only.
    match /systemConfiguration/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Training Sessions: Admin write, logged-in read.
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Flights: Admin write, logged-in read.
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // User Activities: User can only read/write their own.
    match /userActivities/{activityId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Purser Reports: User can create their own. Admin can read all.
    match /purserReports/{reportId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
        allow update, delete: if isAdmin();
    }

    // Community Posts: Users can create/delete their own. All logged-in can read/update (for likes).
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update: if request.auth != null; // Allows liking
        allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Audit Logs: Write-only for server-side operations (achieved via client-side rules allowing no direct access).
    match /auditLogs/{logId} {
      allow read, write: if false; // Should only be written by admin backend functions/actions
    }

    // Fallback: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
