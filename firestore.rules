rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can be read by any authenticated user, but only admins or the user themselves can write.
    // Allow creation for anyone to accommodate signup flow.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if isAdmin() || request.auth.uid == userId;
    }
    
    // System configuration and audit logs are admin-only
    match /systemConfiguration/{docId} {
      allow read, write: if isAdmin();
    }
    match /auditLogs/{logId} {
       allow read, write: if isAdmin();
    }

    // Any authenticated user can read public content like courses, documents, airports.
    // Only admins can write to these collections.
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /documents/{docId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    // User-specific data can only be managed by the user themselves or by an admin.
    match /userQuizAttempts/{attemptId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    match /userDocuments/{docId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow write: if isAdmin(); // Only admins can add/update official documents
    }
    match /userActivities/{activityId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow write: if isAdmin(); // Only admins can manage schedules directly
    }
    
    // Requests can be created by the user, and read by user or admin. Only admin can update.
    match /requests/{requestId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
    }

    // Suggestions can be read by anyone, created by anyone, but only updated by admin.
    match /suggestions/{suggestionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if isAdmin();
    }

    // Community posts can be read and created by anyone authenticated.
    // Users can only update their own posts (e.g., for likes, though logic should be handled server-side/rules)
    match /communityPosts/{postId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth.uid == resource.data.authorId || isAdmin(); // Allow user to update (like) or admin to moderate
    }
    
    // Flights can be read by anyone authenticated, but written only by admins.
    match /flights/{flightId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Flight swaps have more complex rules.
    match /flightSwaps/{swapId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.initiatingUserId;
        allow update: if isAdmin() || (request.auth.uid == request.resource.data.requestingUserId);
    }
    
    // Training sessions
    match /trainingSessions/{sessionId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    
    // Purser reports can be read by the user who created it or an admin.
    // It can only be created by the user and updated by an admin.
    match /purserReports/{reportId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAdmin();
    }
  }
}
