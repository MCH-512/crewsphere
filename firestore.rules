rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      // Admins can read/write any user profile
      // Users can read their own profile
      // Users can update their own profile (e.g., displayName, prefs)
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && (isAdmin() || request.auth.uid == userId);
    }
    
    // Alerts collection
    match /alerts/{alertId} {
      allow read: if request.auth != null; // All authenticated users can read alerts
      allow write: if request.auth != null && isAdmin(); // Only admins can create/update/delete
    }

    // Audit Logs collection
    match /auditLogs/{logId} {
        allow read, write: if request.auth != null && isAdmin(); // Only admins
    }
    
    // Documents collection (general library)
    match /documents/{documentId} {
        allow read: if request.auth != null; // All authenticated users can read
        allow write: if request.auth != null && isAdmin(); // Only admins can write
    }

    // Courses, Quizzes, Questions, CertificateRules
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    match /quizzes/{quizId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    match /questions/{questionId} {
       allow read, write: if request.auth != null && isAdmin();
    }
    match /certificateRules/{ruleId} {
        allow read, write: if request.auth != null && isAdmin();
    }

    // User-specific data
    match /userQuizAttempts/{attemptId} {
        // Users can read their own attempts, Admins can read any
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
        // Users can create their own attempts
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // No one can update/delete attempts
        allow update, delete: if false;
    }
    
    match /userDocuments/{docId} {
        // Users can read their own documents, Admins can read any
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
        // Only Admins can manage these documents
        allow write: if request.auth != null && isAdmin();
    }

    // Community Posts
    match /communityPosts/{postId} {
        allow read: if request.auth != null;
        // Allow create if user is authenticated and is the author
        allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
        // Allow update only for likes by any authenticated user
        allow update: if request.auth != null && request.resource.data.keys().hasOnly(['likes', 'likeCount']);
        // Only author or admin can delete
        allow delete: if request.auth != null && (request.auth.uid == resource.data.authorId || isAdmin());
    }
    
    // Suggestions
    match /suggestions/{suggestionId} {
        allow read: if request.auth != null;
        // Allow create if user is authenticated and is the author
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // Allow update only for upvotes by any authenticated user, or status/notes by admin
        allow update: if request.auth != null && 
            ( (request.resource.data.keys().hasOnly(['upvotes', 'upvoteCount'])) ||
              (isAdmin() && request.resource.data.keys().hasOnly(['status', 'adminNotes'])) );
    }

    // Requests
    match /requests/{requestId} {
        // User can read/create their own requests, admin can read any
        allow read: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // Only admin can update
        allow update: if request.auth != null && isAdmin();
    }

    // Purser Reports
    match /purserReports/{reportId} {
        allow read: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update: if request.auth != null && isAdmin();
    }
    
    // Training Sessions
    match /trainingSessions/{sessionId} {
      allow read: if request.auth != null; // Everyone can see the timeline
      allow write: if request.auth != null && isAdmin(); // Only admins can create/edit sessions
    }

    // User Activities (Schedule)
    match /userActivities/{activityId} {
        // User can read their own activities, Admin can read any
        allow read: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
        // Only Admin (or server-side logic via batch writes) can manage activities
        allow write: if request.auth != null && isAdmin();
    }
    
    // Flights
    match /flights/{flightId} {
      allow read: if request.auth != null; // Everyone can see flights for the timeline
      allow write: if request.auth != null && isAdmin(); // Only admins can manage flights
    }

    // Flight Swaps
    match /flightSwaps/{swapId} {
        allow read: if request.auth != null;
        // Create: Initiator must be self
        allow create: if request.auth != null && request.auth.uid == request.resource.data.initiatingUserId;
        // Update: Either admin, or user making a request, or user cancelling
        allow update: if request.auth != null && (isAdmin() || request.auth.uid == request.resource.data.requestingUserId || request.auth.uid == resource.data.initiatingUserId);
    }
    
    // System Configuration
    match /systemConfiguration/{configId} {
        // Only admins can read/write system config
        allow read, write: if request.auth != null && isAdmin();
    }
  }
}
