rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to get user data (including role) from the users collection
    // This is crucial for role-based access control.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isUser(userId) || isAdmin());
      
      allow create: if 
        // Allow admin to create any user document (must include email)
        (isAdmin() && request.resource.data.email != null) ||
        // Allow authenticated user to create their own document
        (isUser(userId) &&
          // Disallow self-assigning admin role during creation
          (!('role' in request.resource.data) || request.resource.data.role != 'admin')
        );

      allow update: if
        // Admin can update displayName and role
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'role', 'lastLogin'])) ||
        // User can update their own displayName and lastLogin, but not role or email
        (isUser(userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'lastLogin', 'photoURL']) && // Add other self-editable fields as needed
          request.resource.data.role == resource.data.role && // Role cannot be changed by user
          request.resource.data.email == resource.data.email   // Email cannot be changed by user (handled by Firebase Auth)
        );
        
      allow delete: if isAdmin(); // Only admins can delete user documents
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Flights collection
    match /flights/{flightId} {
      allow read: if isAuthenticated(); // All authenticated users can read flight schedules
      allow create, update, delete: if isAdmin(); // Only admins can manage flights
    }

    // Purser Reports collection
    match /purserReports/{reportId} {
      allow read: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && isUser(request.resource.data.userId); // User creates their own report
      allow update, delete: if isAdmin(); // Admins can manage all reports
    }

    // Requests collection
    match /requests/{requestId} {
      allow read: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && isUser(request.resource.data.userId); // User creates their own request
      allow update: if 
        // Admin can update any field (e.g., status)
        isAdmin() || 
        // User can update their own request IF status is still 'pending' (example rule, adjust as needed)
        (isUser(resource.data.userId) && resource.data.status == 'pending' && request.resource.data.status == resource.data.status); 
      allow delete: if isAdmin();
    }
    
    // User Training Progress collection
    // Document ID should be `${userId}_${courseId}`
    match /userTrainingProgress/{progressId} {
        function getUserIdFromProgressId(id) {
            return id.split('_')[0];
        }
        allow read: if isAuthenticated() && (isUser(getUserIdFromProgressId(progressId)) || isAdmin());
        // Users can create/update their own progress.
        allow write: if isAuthenticated() && 
                        isUser(getUserIdFromProgressId(progressId)) &&
                        request.resource.data.userId == getUserIdFromProgressId(progressId); 
        allow delete: if isAdmin();
    }

    // Default deny all other paths
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
