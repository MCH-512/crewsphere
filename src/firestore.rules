
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      // Admins can read/write any user document.
      // A user can read/write their own document.
      allow read, write: if isAdmin() || isUser(userId);
    }

    // Alerts collection
    match /alerts/{alertId} {
      // Admins can read, create, update, and delete alerts.
      allow read, write: if isAdmin();
      // Authenticated users can read alerts.
      allow list: if isSignedIn();
    }
    
    // System Configuration collection
    match /systemConfiguration/{configId} {
      // Only admins can read/write system settings.
      allow read, write: if isAdmin();
    }
    
    // Audit Logs collection
    match /auditLogs/{logId} {
        // Only admins can read audit logs.
        allow read: if isAdmin();
        // Disallow client-side creation/updates to ensure logs are from trusted server environments.
        allow write: if false; 
    }
    
    // Suggestions collection
    match /suggestions/{suggestionId} {
      // Any authenticated user can create a suggestion.
      allow create: if isSignedIn();
      // Any authenticated user can read all suggestions.
      allow list, get: if isSignedIn();
      // Admins can update status/notes. Users can update their own upvote.
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']));
    }
    
    // Community Posts collection
    match /communityPosts/{postId} {
        // Any authenticated user can create, read, and list posts.
        allow create, list, get: if isSignedIn();
        // A user can update their own post, or an admin can moderate.
        // For simplicity here, we allow updating likes by any signed-in user.
        allow update: if isUser(resource.data.authorId) || isAdmin() || isSignedIn(); 
        // A user can delete their own post, or an admin can.
        allow delete: if isUser(resource.data.authorId) || isAdmin();
    }
    
    // Documents collection
    match /documents/{documentId} {
        allow read, list: if isSignedIn();
        // Admins can create/update/delete documents.
        // Users can update the 'readBy' field to acknowledge.
        allow create, delete: if isAdmin();
        allow update: if isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']));
    }
    
    // User Documents collection
    match /userDocuments/{userDocumentId} {
        // Users can manage their own documents. Admins can manage any.
        allow read, write: if isUser(resource.data.userId) || isAdmin();
    }
    
    // Flights collection
    match /flights/{flightId} {
      // Admins can manage all flights.
      allow read, write: if isAdmin();
      // Authenticated users can read flights they are assigned to.
      allow get: if isSignedIn() && request.auth.uid in resource.data.allCrewIds;
      // Listing flights needs to be handled carefully. For the timeline view, we allow any signed-in user to list.
      allow list: if isSignedIn();
    }

    // User Activities collection (schedule)
    match /userActivities/{activityId} {
      allow read, write: if isUser(resource.data.userId) || isAdmin();
    }

    // Flight Swaps collection
    match /flightSwaps/{swapId} {
      // Admins can manage any swap.
      // Participants of the swap can read it.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid in resource.data.participantIds);
      // Only authenticated users can create a new swap posting.
      allow create: if isSignedIn();
      // An admin can update any swap. A user can update a swap if they are becoming the requestingUser.
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.requestingUserId == request.auth.uid) || isUser(resource.data.initiatingUserId);
      allow list: if isSignedIn();
    }

    // Purser Reports collection
    match /purserReports/{reportId} {
      // Users can manage their own reports. Admins can manage any.
      allow read, write: if isUser(resource.data.userId) || isAdmin();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read, list: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Quizzes collection
    match /quizzes/{quizId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
     // Questions collection
    match /questions/{questionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Certificate Rules collection
    match /certificateRules/{ruleId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // User Quiz Attempts collection
    match /userQuizAttempts/{attemptId} {
       // Users can create their own attempts.
      allow create: if isSignedIn();
      // Users can read their own attempts, Admins can read any.
      allow read: if isUser(resource.data.userId) || isAdmin();
    }
    
    // Requests collection
    match /requests/{requestId} {
       // Users can manage their own requests. Admins can manage any.
       allow read, write: if isUser(resource.data.userId) || isAdmin();
    }
  }
}
