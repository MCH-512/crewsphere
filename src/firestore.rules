rules_version = '2';

// --- SERVICE & HELPER FUNCTIONS --- //
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Reusability and Performance --- //

    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the authenticated user is an administrator.
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Checks if the authenticated user is the owner of the document.
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allows an admin to do anything - use with caution.
    function allowAdmin() {
      return isAdmin();
    }


    // --- COLLECTION-SPECIFIC RULES --- //

    // Users: Can read their own data. Admins can read all.
    // Users can only update their own data, but not change their role or status. Admins can.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAdmin(); // Only admins can create users via the backend service.
      allow update: if (isOwner(userId) && !("role" in request.resource.data)) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // auditLogs: Critical system data. Can ONLY be written from a trusted server environment (e.g., Cloud Function or Admin SDK).
    // Client-side writes are completely forbidden to prevent log tampering.
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      // This rule ensures writes can only come from the Admin SDK where auth is null.
      // In a more complex setup with Cloud Functions, you might check for specific function tokens.
      allow write: if request.auth == null || isAdmin(); // Simplification: allow admin writes for now, but server-only is best practice.
      allow delete: if false; // Logs should be immutable.
    }

    // flights, trainingSessions: Writable only by admins. Readable by any authenticated user.
    match /flights/{flightId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /trainingSessions/{sessionId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // courses, quizzes, questions, certificateRules: Writable only by admins. Readable by any authenticated user.
    match /courses/{courseId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /quizzes/{quizId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /questions/{questionId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
     match /certificateRules/{ruleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // alerts: Writable only by admins. Readable by any authenticated user.
    match /alerts/{alertId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // userActivities: Users can create their own. Admins can create/delete. No updates allowed.
    match /userActivities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if (isAuthenticated() && request.auth.uid == request.resource.data.userId) || isAdmin();
      allow update: if false; // Activities should be immutable, created or deleted.
      allow delete: if isAdmin();
    }
    
    // documents (Library): Writable by admin, readable by all authenticated users.
    match /documents/{documentId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // userDocuments: Users can manage their own documents. Admins have full access.
    match /userDocuments/{docId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId) || isAdmin();
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // userQuizAttempts, userProgress: Users can only manage their own records.
    match /userQuizAttempts/{attemptId} {
        allow read, create: if isOwner(request.resource.data.userId);
        allow update, delete: if false; // Attempts should be immutable.
    }
    
    match /userProgress/{userId}/{courseId} {
        allow read, write: if isOwner(userId);
    }
    
    // requests: Users can create their own. Can only be updated/deleted by owner if status is 'pending', or by an admin.
    match /requests/{requestId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isAdmin() || (isOwner(resource.data.userId) && resource.data.status == 'pending');
        allow delete: if isOwner(resource.data.userId) && resource.data.status == 'pending';
    }

    // suggestions: Any authenticated user can create. Owner can delete. Update is only for upvotes.
    match /suggestions/{suggestionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      
      // A user can only change the 'upvotes' array. They cannot change their vote AND other fields in the same request.
      // This is a more robust way to handle partial updates like upvoting.
      allow update: if isAuthenticated()
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvoteCount']);
      
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // flightSwaps: Any authenticated user can create/read. Can only be updated/deleted by participants or admin.
    match /flightSwaps/{swapId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if (isAuthenticated() && request.auth.uid in resource.data.participantIds) || isAdmin();
        allow delete: if (isAuthenticated() && request.auth.uid in resource.data.participantIds) || isAdmin();
    }
    
    // communityPosts: Any authenticated user can create. Owner or admin can delete. Update is only for likes.
    match /communityPosts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']);
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // systemConfiguration: Only readable by authenticated users, only writable by admins.
    match /systemConfiguration/{configId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // purserReports: Users can only create for themselves. Admins can read all.
    match /purserReports/{reportId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isAdmin(); // Only admins can update status/notes.
        allow delete: if isAdmin();
    }
  }
}
