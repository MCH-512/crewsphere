rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return getRole() == 'admin';
    }

    // --- Default Deny ---
    // Uncommenting this is the final step once all rules are verified.
    // For now, we allow more specific rules to take precedence.
    // match /{document=**} {
    //   allow read, write: if false;
    // }

    // --- Users Collection ---
    match /users/{userId} {
      // Users can read/update their own profile. Admins can read/write any.
      allow read, update: if isOwner(userId) || isAdmin();
      allow create, delete: if isAdmin();
    }

    // --- Alerts Collection ---
    match /alerts/{alertId} {
      // Anyone signed in can read alerts. Only admins can create/modify.
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Audit Logs ---
    match /auditLogs/{logId} {
      // Only admins can read audit logs. Nobody can modify them.
      allow read: if isAdmin();
      allow write: if false; // Immutable
    }
    
    // --- System Configuration ---
    match /systemConfiguration/{configId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // --- Community Posts ---
    match /communityPosts/{postId} {
      allow read: if isSignedIn();
      // Users can create posts. They can only update/delete their own posts. Admins have full access.
      allow create: if isSignedIn();
      allow update, delete: if (isOwner(resource.data.authorId) && isSignedIn()) || isAdmin();
    }

    // --- Courses, Quizzes, Questions, CertificateRules ---
    match /courses/{courseId} {
      // Published courses are public. All courses are accessible by admins.
      allow read: if resource.data.published == true || isAdmin();
      allow write: if isAdmin();
    }
    match /quizzes/{quizId} {
      allow read, write: if isAdmin();
    }
     match /questions/{questionId} {
      allow read: if isSignedIn(); // Users need to read questions for quizzes
      allow write: if isAdmin();
    }
    match /certificateRules/{ruleId} {
      allow read, write: if isAdmin();
    }
    match /userQuizAttempts/{attemptId} {
        allow read, create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow update, delete: if isAdmin();
    }
     match /userProgress/{userId}/courses/{courseId} {
        allow read, write: if isOwner(userId);
     }


    // --- Documents & User Documents ---
    match /documents/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /userDocuments/{userDocId} {
        allow read: if isSignedIn();
        // Users can create/update their own documents. Admins can do anything.
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId) || isAdmin();
        allow delete: if isAdmin();
    }

    // --- Flights, Swaps, Reports ---
    match /flights/{flightId} {
      // Users can only read flights they are assigned to. Admins can read all.
      allow read: if request.auth.uid in resource.data.allCrewIds || isAdmin();
      allow write: if isAdmin();
    }
     match /flightSwaps/{swapId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.initiatingUserId) || isAdmin();
    }
     match /purserReports/{reportId} {
        allow read: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
        allow create: if isSignedIn();
        allow update: if isAdmin();
     }
     
    // --- Other User-Specific Data ---
    match /requests/{reqId} {
      allow read, create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    match /suggestions/{suggestionId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        // Allow anyone signed in to upvote (update), but only admins to change status/notes.
        allow update: if isSignedIn();
        allow delete: if isAdmin();
    }
    match /trainingSessions/{sessionId} {
      allow read: if request.auth.uid in resource.data.attendeeIds || isAdmin();
      allow write: if isAdmin();
    }
     match /userActivities/{activityId} {
       allow read, create: if isOwner(request.resource.data.userId);
       allow write: if isAdmin();
    }
  }
}
