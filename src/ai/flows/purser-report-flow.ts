
'use server';
/**
 * @fileOverview An AI flow for generating Purser Reports based on flight details and observations.
 *
 * - generatePurserReport - A function that handles the Purser Report generation.
 * - PurserReportInput - The input type for the generatePurserReport function.
 * - PurserReportOutput - The return type for the generatePurserReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PurserReportInputSchema = z.object({
  flightNumber: z.string().min(3).max(10).describe('Flight number (e.g., BA245, UAL123).'),
  flightDate: z.string().date().describe('Date of the flight (YYYY-MM-DD).'),
  departureAirport: z.string().min(3).max(10).describe('Departure airport ICAO/IATA code.'),
  arrivalAirport: z.string().min(3).max(10).describe('Arrival airport ICAO/IATA code.'),
  aircraftTypeRegistration: z.string().min(3).max(20).describe('Aircraft type and registration (e.g., B789 G-XYZC).'),
  crewMembers: z.string().min(10).describe('List of crew members on board (names and roles).'),
  passengerLoad: z.object({
    total: z.number().int().min(0).describe('Total number of passengers.'),
    adults: z.number().int().min(0).describe('Number of adult passengers.'),
    children: z.number().int().min(0).describe('Number of child passengers.'),
    infants: z.number().int().min(0).describe('Number of infant passengers.'),
  }),
  generalFlightSummary: z.string().min(10).describe('Overall summary of the flight, noting punctuality, and general atmosphere.'),
  safetyIncidents: z.string().optional().describe('Detailed description of any safety-related incidents or observations (e.g., turbulence, equipment malfunctions affecting safety).'),
  securityIncidents: z.string().optional().describe('Detailed description of any security-related incidents (e.g., unruly passengers, security breaches).'),
  medicalIncidents: z.string().optional().describe('Detailed description of any medical incidents involving passengers or crew, including actions taken.'),
  passengerFeedback: z.string().optional().describe('Summary of notable positive or negative passenger feedback received during the flight.'),
  cateringNotes: z.string().optional().describe('Comments on catering quality, quantity, and any issues encountered with meal services.'),
  maintenanceIssues: z.string().optional().describe('Description of any aircraft defects or maintenance issues noted by the crew during the flight.'),
  otherObservations: z.string().optional().describe('Any other relevant observations or information not covered in other sections (e.g., ground handling, customs/immigration issues).'),
});
export type PurserReportInput = z.infer<typeof PurserReportInputSchema>;

const PurserReportOutputSchema = z.object({
  formattedReport: z.string().describe('A comprehensive, well-structured Purser Report generated by the AI based on the input, suitable for official records. Use Markdown for clear formatting.'),
  keyHighlights: z.array(z.string()).describe('A list of AI-identified key highlights or action items from the report.'),
});
export type PurserReportOutput = z.infer<typeof PurserReportOutputSchema>;

export async function generatePurserReport(input: PurserReportInput): Promise<PurserReportOutput> {
  return purserReportFlow(input);
}

const purserReportPrompt = ai.definePrompt({
  name: 'purserReportPrompt',
  input: {schema: PurserReportInputSchema},
  output: {schema: PurserReportOutputSchema},
  prompt: `You are an AI assistant tasked with generating a formal Purser Report for an airline flight.
Use the provided information to create a comprehensive, well-organized, and professional report.
The report should be structured clearly with headings for each section. Use Markdown for formatting.

Flight Details:
- Flight Number: {{{flightNumber}}}
- Date: {{{flightDate}}}
- Route: {{{departureAirport}}} - {{{arrivalAirport}}}
- Aircraft: {{{aircraftTypeRegistration}}}
- Crew Members:
{{{crewMembers}}}
- Passenger Load: Total: {{{passengerLoad.total}}}, Adults: {{{passengerLoad.adults}}}, Children: {{{passengerLoad.children}}}, Infants: {{{passengerLoad.infants}}}

Report Sections:

1.  **## General Flight Summary**:
    {{{generalFlightSummary}}}

{{#if safetyIncidents}}
2.  **## Safety Incidents/Observations**:
    {{{safetyIncidents}}}
{{/if}}

{{#if securityIncidents}}
3.  **## Security Incidents/Observations**:
    {{{securityIncidents}}}
{{/if}}

{{#if medicalIncidents}}
4.  **## Medical Incidents**:
    {{{medicalIncidents}}}
{{/if}}

{{#if passengerFeedback}}
5.  **## Passenger Feedback**:
    {{{passengerFeedback}}}
{{/if}}

{{#if cateringNotes}}
6.  **## Catering Notes**:
    {{{cateringNotes}}}
{{/if}}

{{#if maintenanceIssues}}
7.  **## Maintenance Issues Noted**:
    {{{maintenanceIssues}}}
{{/if}}

{{#if otherObservations}}
8.  **## Other Observations/Information**:
    {{{otherObservations}}}
{{/if}}

After generating the full report, provide a separate list of key highlights or action items that management should be aware of. This should be a concise summary of the most critical points from the entire report.

Ensure the final output strictly follows the PurserReportOutputSchema, providing both 'formattedReport' and 'keyHighlights'.
The 'formattedReport' should be a single string with Markdown.
The 'keyHighlights' should be an array of strings.
`,
});

const purserReportFlow = ai.defineFlow(
  {
    name: 'purserReportFlow',
    inputSchema: PurserReportInputSchema,
    outputSchema: PurserReportOutputSchema,
  },
  async (input: PurserReportInput) => {
    const {output} = await purserReportPrompt(input);
    if (!output) {
      throw new Error("Failed to get a response from the AI model for the Purser Report.");
    }
    return output;
  }
);

