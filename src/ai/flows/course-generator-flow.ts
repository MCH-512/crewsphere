
'use server';
/**
 * @fileOverview An AI flow for generating course outlines.
 *
 * - generateCourseOutline - A function that generates a course outline based on a topic.
 * - CourseGenerationInput - The input type for the generateCourseOutline function.
 * - CourseGenerationOutput - The return type for the generateCourseOutline function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { Chapter } from '@/schemas/course-schema'; // Reuse chapter type

// Define Zod schema for a single chapter, matching course-schema.ts but simplified for generation
// No resources or children directly generated by this AI first pass, they are string suggestions
const GeneratedChapterSchema = z.object({
  id: z.string().optional(), // Optional as it's generated
  title: z.string().describe("Title of the chapter."),
  content: z.string().describe("Suggested content or key topics for this chapter, in Markdown format."),
  // AI might suggest resource types or ideas as text within the content.
  // For a first pass, complex resource object generation is omitted.
  // Children chapters can be a follow-up or manual step.
});

export const CourseGenerationInputSchema = z.object({
  courseTopic: z.string().min(5, "Course topic must be at least 5 characters.").describe("The main topic or subject of the course to be generated."),
  targetAudience: z.enum(["Cabin Crew", "Pilot", "Ground Staff", "All Crew", "Other"]).default("All Crew").describe("The primary audience for this course."),
  numberOfChapters: z.coerce.number().int().min(1, "Minimum 1 chapter.").max(10, "Maximum 10 chapters.").default(5).describe("Approximate number of chapters desired."),
  detailLevel: z.enum(["overview", "standard", "detailed"]).default("standard").describe("Level of detail for chapter content."),
});
export type CourseGenerationInput = z.infer<typeof CourseGenerationInputSchema>;

export const CourseGenerationOutputSchema = z.object({
  courseTitle: z.string().describe("A concise and relevant title for the generated course."),
  suggestedCategory: z.string().describe("A suggested category for this course (e.g., Safety, CRM, Aircraft Systems)."),
  description: z.string().describe("A brief overview of the course content and objectives."),
  chapters: z.array(GeneratedChapterSchema).describe("An array of generated chapters, each with a title and suggested content."),
});
export type CourseGenerationOutput = z.infer<typeof CourseGenerationOutputSchema>;


export async function generateCourseOutline(
  input: CourseGenerationInput
): Promise<CourseGenerationOutput> {
  return courseGeneratorFlow(input);
}

const courseGeneratorPrompt = ai.definePrompt({
  name: 'courseGeneratorPrompt',
  input: {schema: CourseGenerationInputSchema},
  output: {schema: CourseGenerationOutputSchema},
  prompt: `You are an expert instructional designer specializing in aviation training programs for {{targetAudience}}.
Your task is to generate a structured course outline based on the provided topic: "{{courseTopic}}".

The course should have approximately {{numberOfChapters}} chapters.
The level of detail for each chapter's content should be: {{detailLevel}}.

Please generate the following:
1.  **courseTitle**: A clear and engaging title for the course.
2.  **suggestedCategory**: Suggest a relevant training category (e.g., Safety Equipment, Emergency Procedures, CRM, Aircraft Type Rating, Dangerous Goods, Service Excellence).
3.  **description**: A concise (2-3 sentences) description of what the course will cover and its learning objectives.
4.  **chapters**: An array of {{numberOfChapters}} chapters. Each chapter object must have:
    *   `title`: A specific title for the chapter.
    *   `content`: A paragraph or a few bullet points outlining the key topics, concepts, or procedures to be covered in this chapter. Use Markdown for formatting if appropriate (e.g., for lists). If the detail level is 'detailed', provide more depth. If 'overview', keep it high-level.
    *   Keep the content practical and relevant to {{targetAudience}}.

Example chapter content for a "Fire Fighting" chapter (standard detail):
"This chapter covers the different classes of fire (A, B, C, D), the types of fire extinguishers available onboard (Water Glycol, Halon/Equivalent, Lithium Battery Fire Bags), their proper operation, and the immediate actions to take when a fire is detected. Emphasis on communication and crew coordination during a fire emergency."

Do not include complex resource objects or nested children chapters in this initial generation. Focus on titles and textual content outlines.
Ensure the output is valid JSON conforming to the output schema.
`,
});

const courseGeneratorFlow = ai.defineFlow(
  {
    name: 'courseGeneratorFlow',
    inputSchema: CourseGenerationInputSchema,
    outputSchema: CourseGenerationOutputSchema,
  },
  async (input: CourseGenerationInput) => {
    const {output} = await courseGeneratorPrompt(input);
    if (!output) {
      throw new Error("The AI failed to generate a course outline. Please try again or adjust your topic.");
    }
    // Ensure chapters array has IDs for potential future use if we were to display them with keys
    const chaptersWithIds = output.chapters.map((chapter, index) => ({
        ...chapter,
        id: chapter.id || `gen_chapter_${index}_${Date.now()}` 
    }));
    return { ...output, chapters: chaptersWithIds };
  }
);
